Shader "waterShader"
{
    Properties
    {
        [NoScaleOffset] _BaseTex("BaseTex", 2D) = "white" {}
[NoScaleOffset] _Emission("Emission", 2D) = "white" {}
_EmissionAmount("EmissionAmount", Range(0, 1)) = 0.5
_WaveHeight("Wave Height", Range(0, 1)) = 0.2
_Opacity("Opacity", Range(0, 1)) = 0.5
_Tint("Tint", Color) = (1,1,1,0)
_Offset("Offset", Range(0, 10)) = 0.5
Vector1_604D800B("FoamOpacity", Range(0, 1)) = 1
[NonModifiableTextureData] [NoScaleOffset] _SampleTexture2DLOD_C65E3FC4_Texture_1("Texture2D", 2D) = "white" {}

    }
    SubShader
    {
        Tags
        {
			"RenderType" = "Cutout"
        }
        Pass
        {
        	Tags{"LightMode" = "LightweightForward"}

        	// Material options generated by graph

            Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

            Cull Back

            ZTest LEqual

            ZWrite Off

        	HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

        	// -------------------------------------
            // Lightweight Pipeline keywords
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
            #pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
            #pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile _ _SHADOWS_SOFT
            #pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE
            
        	// -------------------------------------
            // Unity defined keywords
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile_fog

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
        	#pragma fragment frag

        	// Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

        	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
        	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
        	#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float _EmissionAmount;
            float _WaveHeight;
            float _Opacity;
            float4 _Tint;
            float _Offset;
            float Vector1_604D800B;
            CBUFFER_END

            TEXTURE2D(_BaseTex); SAMPLER(sampler_BaseTex); float4 _BaseTex_TexelSize;
            TEXTURE2D(_Emission); SAMPLER(sampler_Emission); float4 _Emission_TexelSize;
            TEXTURE2D(_SampleTexture2DLOD_C65E3FC4_Texture_1); SAMPLER(sampler_SampleTexture2DLOD_C65E3FC4_Texture_1); float4 _SampleTexture2DLOD_C65E3FC4_Texture_1_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 ObjectSpacePosition;
                half4 uv0;
            };

            struct SurfaceDescriptionInputs
            {
                float3 TangentSpaceNormal;
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                half4 uv0;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A + B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
            {
                float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
                float4 result2 = 2.0 * Base * Blend;
                float4 zeroOrOne = step(Base, 0.5);
                Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
            {
                Out = dot(A, B);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Split_E0F0B228_R_1 = IN.ObjectSpacePosition[0];
                float _Split_E0F0B228_G_2 = IN.ObjectSpacePosition[1];
                float _Split_E0F0B228_B_3 = IN.ObjectSpacePosition[2];
                float _Split_E0F0B228_A_4 = 0;
                float _Multiply_AB470896_Out_2;
                Unity_Multiply_float(0.5, _Time.y, _Multiply_AB470896_Out_2);

                float2 _TilingAndOffset_AB7F2ADF_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (10,10), (_Multiply_AB470896_Out_2.xx), _TilingAndOffset_AB7F2ADF_Out_3);
                float4 _SampleTexture2DLOD_C65E3FC4_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_SampleTexture2DLOD_C65E3FC4_Texture_1, sampler_SampleTexture2DLOD_C65E3FC4_Texture_1, _TilingAndOffset_AB7F2ADF_Out_3, 0);
                float _SampleTexture2DLOD_C65E3FC4_R_5 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.r;
                float _SampleTexture2DLOD_C65E3FC4_G_6 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.g;
                float _SampleTexture2DLOD_C65E3FC4_B_7 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.b;
                float _SampleTexture2DLOD_C65E3FC4_A_8 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.a;
                float _Property_9DDC2F17_Out_0 = _WaveHeight;
                float4 _Multiply_8CCE57AE_Out_2;
                Unity_Multiply_float(_SampleTexture2DLOD_C65E3FC4_RGBA_0, (_Property_9DDC2F17_Out_0.xxxx), _Multiply_8CCE57AE_Out_2);

                float4 _Add_517BED30_Out_2;
                Unity_Add_float4((_Split_E0F0B228_G_2.xxxx), _Multiply_8CCE57AE_Out_2, _Add_517BED30_Out_2);
                float4 _Combine_9FB3F0AE_RGBA_4;
                float3 _Combine_9FB3F0AE_RGB_5;
                float2 _Combine_9FB3F0AE_RG_6;
                Unity_Combine_float(_Split_E0F0B228_R_1, (_Add_517BED30_Out_2).x, _Split_E0F0B228_B_3, _Split_E0F0B228_A_4, _Combine_9FB3F0AE_RGBA_4, _Combine_9FB3F0AE_RGB_5, _Combine_9FB3F0AE_RG_6);
                description.Position = (_Combine_9FB3F0AE_RGBA_4.xyz);
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Normal;
                float3 Emission;
                float Metallic;
                float Smoothness;
                float Occlusion;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _Multiply_1F5F0C00_Out_2;
                Unity_Multiply_float(_Time.y, 0.02, _Multiply_1F5F0C00_Out_2);

                float2 _TilingAndOffset_541288F4_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), (_Multiply_1F5F0C00_Out_2.xx), _TilingAndOffset_541288F4_Out_3);
                float4 _SampleTexture2D_EA4DD8F2_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_541288F4_Out_3);
                float _SampleTexture2D_EA4DD8F2_R_4 = _SampleTexture2D_EA4DD8F2_RGBA_0.r;
                float _SampleTexture2D_EA4DD8F2_G_5 = _SampleTexture2D_EA4DD8F2_RGBA_0.g;
                float _SampleTexture2D_EA4DD8F2_B_6 = _SampleTexture2D_EA4DD8F2_RGBA_0.b;
                float _SampleTexture2D_EA4DD8F2_A_7 = _SampleTexture2D_EA4DD8F2_RGBA_0.a;
                float _Multiply_5F6EB22E_Out_2;
                Unity_Multiply_float(_Time.y, -0.018, _Multiply_5F6EB22E_Out_2);

                float2 _Vector2_85C43C1B_Out_0 = float2(_Multiply_5F6EB22E_Out_2,0);
                float2 _TilingAndOffset_581491AA_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), _Vector2_85C43C1B_Out_0, _TilingAndOffset_581491AA_Out_3);
                float4 _SampleTexture2D_116C7E36_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_581491AA_Out_3);
                float _SampleTexture2D_116C7E36_R_4 = _SampleTexture2D_116C7E36_RGBA_0.r;
                float _SampleTexture2D_116C7E36_G_5 = _SampleTexture2D_116C7E36_RGBA_0.g;
                float _SampleTexture2D_116C7E36_B_6 = _SampleTexture2D_116C7E36_RGBA_0.b;
                float _SampleTexture2D_116C7E36_A_7 = _SampleTexture2D_116C7E36_RGBA_0.a;
                float4 _Blend_E96D7AE3_Out_2;
                Unity_Blend_Overlay_float4(_SampleTexture2D_EA4DD8F2_RGBA_0, _SampleTexture2D_116C7E36_RGBA_0, _Blend_E96D7AE3_Out_2, 0.7);
                float4 _Property_7B6FDA9E_Out_0 = _Tint;
                float4 _Blend_66D3BE22_Out_2;
                Unity_Blend_Overlay_float4(_Blend_E96D7AE3_Out_2, _Property_7B6FDA9E_Out_0, _Blend_66D3BE22_Out_2, 0.2);
                float _Property_87B89A7_Out_0 = Vector1_604D800B;
                float3 _Subtract_AF83BA8B_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _WorldSpaceCameraPos, _Subtract_AF83BA8B_Out_2);
                float _DotProduct_FA3CFD41_Out_2;
                Unity_DotProduct_float3(-1 * mul(UNITY_MATRIX_M, transpose(mul(UNITY_MATRIX_I_M, UNITY_MATRIX_I_V)) [2].xyz), _Subtract_AF83BA8B_Out_2, _DotProduct_FA3CFD41_Out_2);
                float2 _Vector2_D1443D94_Out_0 = float2(0,_ProjectionParams.z);
                float _Remap_54142FF7_Out_3;
                Unity_Remap_float(_DotProduct_FA3CFD41_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_54142FF7_Out_3);
                float _Property_34931150_Out_0 = _Offset;
                float _Add_E52C0E7D_Out_2;
                Unity_Add_float(_DotProduct_FA3CFD41_Out_2, _Property_34931150_Out_0, _Add_E52C0E7D_Out_2);
                float _Remap_9FC2BFD6_Out_3;
                Unity_Remap_float(_Add_E52C0E7D_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_9FC2BFD6_Out_3);
                float _SceneDepth_795A8AE8_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_795A8AE8_Out_1);
                float _Smoothstep_E6C5DA2F_Out_3;
                Unity_Smoothstep_float(_Remap_54142FF7_Out_3, _Remap_9FC2BFD6_Out_3, _SceneDepth_795A8AE8_Out_1, _Smoothstep_E6C5DA2F_Out_3);
                float _OneMinus_51E3FCAF_Out_1;
                Unity_OneMinus_float(_Smoothstep_E6C5DA2F_Out_3, _OneMinus_51E3FCAF_Out_1);
                float _Smoothstep_D148A55_Out_3;
                Unity_Smoothstep_float(0, 1, _OneMinus_51E3FCAF_Out_1, _Smoothstep_D148A55_Out_3);
                float _Multiply_147E627D_Out_2;
                Unity_Multiply_float(_Property_87B89A7_Out_0, _Smoothstep_D148A55_Out_3, _Multiply_147E627D_Out_2);

                float _Multiply_325AF3E8_Out_2;
                Unity_Multiply_float(_Time.y, 0.1, _Multiply_325AF3E8_Out_2);

                float2 _TilingAndOffset_82D65D88_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (20,20), (_Multiply_325AF3E8_Out_2.xx), _TilingAndOffset_82D65D88_Out_3);
                float4 _SampleTexture2D_4E0437DF_RGBA_0 = SAMPLE_TEXTURE2D(_Emission, sampler_Emission, _TilingAndOffset_82D65D88_Out_3);
                float _SampleTexture2D_4E0437DF_R_4 = _SampleTexture2D_4E0437DF_RGBA_0.r;
                float _SampleTexture2D_4E0437DF_G_5 = _SampleTexture2D_4E0437DF_RGBA_0.g;
                float _SampleTexture2D_4E0437DF_B_6 = _SampleTexture2D_4E0437DF_RGBA_0.b;
                float _SampleTexture2D_4E0437DF_A_7 = _SampleTexture2D_4E0437DF_RGBA_0.a;
                float _Property_61BDED5C_Out_0 = _EmissionAmount;
                float4 _Multiply_88B0DFF8_Out_2;
                Unity_Multiply_float(_SampleTexture2D_4E0437DF_RGBA_0, (_Property_61BDED5C_Out_0.xxxx), _Multiply_88B0DFF8_Out_2);

                float _Split_2AE763D8_R_1 = _Multiply_88B0DFF8_Out_2[0];
                float _Split_2AE763D8_G_2 = _Multiply_88B0DFF8_Out_2[1];
                float _Split_2AE763D8_B_3 = _Multiply_88B0DFF8_Out_2[2];
                float _Split_2AE763D8_A_4 = _Multiply_88B0DFF8_Out_2[3];
                float _Property_5673100C_Out_0 = _Opacity;
                float _Multiply_F2A88990_Out_2;
                Unity_Multiply_float(1, _Property_5673100C_Out_0, _Multiply_F2A88990_Out_2);

                surface.Albedo = (_Blend_66D3BE22_Out_2.xyz);
                surface.Normal = IN.TangentSpaceNormal;
                surface.Emission = (_Multiply_147E627D_Out_2.xxx);
                surface.Metallic = _Split_2AE763D8_A_4;
                surface.Smoothness = _Split_2AE763D8_A_4;
                surface.Occlusion = 1;
                surface.Alpha = _Multiply_F2A88990_Out_2;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct GraphVertexOutput
            {
                float4 clipPos                : SV_POSITION;
                DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
        		half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
            	float4 shadowCoord            : TEXCOORD2;

        		// Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv0 : TEXCOORD9;
                half4 uv1 : TEXCOORD10;

                UNITY_VERTEX_INPUT_INSTANCE_ID
            	UNITY_VERTEX_OUTPUT_STEREO
            };

            GraphVertexOutput vert (GraphVertexInput v)
        	{
        		GraphVertexOutput o = (GraphVertexOutput)0;
                UNITY_SETUP_INSTANCE_ID(v);
            	UNITY_TRANSFER_INSTANCE_ID(v, o);
        		UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        		// Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

        		// Vertex description inputs defined by graph
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.uv0 = uv0;

        	    VertexDescription vd = PopulateVertexData(vdi);
        		v.vertex.xyz = vd.Position;

        		// Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv0 = uv0;
                o.uv1 = uv1;

        		float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

                VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
                
         		// We either sample GI from lightmap or SH.
        	    // Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
                // see DECLARE_LIGHTMAP_OR_SH macro.
        	    // The following funcions initialize the correct variable with correct data
        	    OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
        	    OUTPUT_SH(lwWNormal, o.vertexSH);

        	    half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
        	    half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
        	    o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
        	    o.clipPos = vertexInput.positionCS;

        	#ifdef _MAIN_LIGHT_SHADOWS
        		o.shadowCoord = GetShadowCoord(vertexInput);
        	#endif
        		return o;
        	}

        	half4 frag (GraphVertexOutput IN ) : SV_Target
            {
            	UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

        		// Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;
                float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Specular = float3(0, 0, 0);
        		float Metallic = 1;
        		float3 Normal = float3(0, 0, 1);
        		float3 Emission = 0;
        		float Smoothness = 0.5;
        		float Occlusion = 1;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Normal = surf.Normal;
                Emission = surf.Emission;
                Metallic = surf.Metallic;
                Smoothness = surf.Smoothness;
                Occlusion = surf.Occlusion;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

        		InputData inputData;
        		inputData.positionWS = WorldSpacePosition;

        #ifdef _NORMALMAP
        	    inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
        #else
            #if !SHADER_HINT_NICE_QUALITY
                inputData.normalWS = WorldSpaceNormal;
            #else
        	    inputData.normalWS = normalize(WorldSpaceNormal);
            #endif
        #endif

        #if !SHADER_HINT_NICE_QUALITY
        	    // viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
        	    inputData.viewDirectionWS = WorldSpaceViewDirection;
        #else
        	    inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
        #endif

        	    inputData.shadowCoord = IN.shadowCoord;

        	    inputData.fogCoord = IN.fogFactorAndVertexLight.x;
        	    inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
        	    inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

        		half4 color = LightweightFragmentPBR(
        			inputData, 
        			Albedo, 
        			Metallic, 
        			Specular, 
        			Smoothness, 
        			Occlusion, 
        			Emission, 
        			Alpha);

        		// Computes fog factor per-vertex
            	color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

        #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
        		return color;
            }

        	ENDHLSL
        }
        Pass
        {
        	Name "ShadowCaster"
            Tags{"LightMode" = "ShadowCaster"}

            ZWrite On ZTest LEqual

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float _EmissionAmount;
            float _WaveHeight;
            float _Opacity;
            float4 _Tint;
            float _Offset;
            float Vector1_604D800B;
            CBUFFER_END

            TEXTURE2D(_BaseTex); SAMPLER(sampler_BaseTex); float4 _BaseTex_TexelSize;
            TEXTURE2D(_Emission); SAMPLER(sampler_Emission); float4 _Emission_TexelSize;
            TEXTURE2D(_SampleTexture2DLOD_C65E3FC4_Texture_1); SAMPLER(sampler_SampleTexture2DLOD_C65E3FC4_Texture_1); float4 _SampleTexture2DLOD_C65E3FC4_Texture_1_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 ObjectSpacePosition;
                half4 uv0;
            };

            struct SurfaceDescriptionInputs
            {
                float3 TangentSpaceNormal;
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                half4 uv0;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A + B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
            {
                float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
                float4 result2 = 2.0 * Base * Blend;
                float4 zeroOrOne = step(Base, 0.5);
                Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
            {
                Out = dot(A, B);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Split_E0F0B228_R_1 = IN.ObjectSpacePosition[0];
                float _Split_E0F0B228_G_2 = IN.ObjectSpacePosition[1];
                float _Split_E0F0B228_B_3 = IN.ObjectSpacePosition[2];
                float _Split_E0F0B228_A_4 = 0;
                float _Multiply_AB470896_Out_2;
                Unity_Multiply_float(0.5, _Time.y, _Multiply_AB470896_Out_2);

                float2 _TilingAndOffset_AB7F2ADF_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (10,10), (_Multiply_AB470896_Out_2.xx), _TilingAndOffset_AB7F2ADF_Out_3);
                float4 _SampleTexture2DLOD_C65E3FC4_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_SampleTexture2DLOD_C65E3FC4_Texture_1, sampler_SampleTexture2DLOD_C65E3FC4_Texture_1, _TilingAndOffset_AB7F2ADF_Out_3, 0);
                float _SampleTexture2DLOD_C65E3FC4_R_5 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.r;
                float _SampleTexture2DLOD_C65E3FC4_G_6 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.g;
                float _SampleTexture2DLOD_C65E3FC4_B_7 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.b;
                float _SampleTexture2DLOD_C65E3FC4_A_8 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.a;
                float _Property_9DDC2F17_Out_0 = _WaveHeight;
                float4 _Multiply_8CCE57AE_Out_2;
                Unity_Multiply_float(_SampleTexture2DLOD_C65E3FC4_RGBA_0, (_Property_9DDC2F17_Out_0.xxxx), _Multiply_8CCE57AE_Out_2);

                float4 _Add_517BED30_Out_2;
                Unity_Add_float4((_Split_E0F0B228_G_2.xxxx), _Multiply_8CCE57AE_Out_2, _Add_517BED30_Out_2);
                float4 _Combine_9FB3F0AE_RGBA_4;
                float3 _Combine_9FB3F0AE_RGB_5;
                float2 _Combine_9FB3F0AE_RG_6;
                Unity_Combine_float(_Split_E0F0B228_R_1, (_Add_517BED30_Out_2).x, _Split_E0F0B228_B_3, _Split_E0F0B228_A_4, _Combine_9FB3F0AE_RGBA_4, _Combine_9FB3F0AE_RGB_5, _Combine_9FB3F0AE_RG_6);
                description.Position = (_Combine_9FB3F0AE_RGBA_4.xyz);
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _Multiply_1F5F0C00_Out_2;
                Unity_Multiply_float(_Time.y, 0.02, _Multiply_1F5F0C00_Out_2);

                float2 _TilingAndOffset_541288F4_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), (_Multiply_1F5F0C00_Out_2.xx), _TilingAndOffset_541288F4_Out_3);
                float4 _SampleTexture2D_EA4DD8F2_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_541288F4_Out_3);
                float _SampleTexture2D_EA4DD8F2_R_4 = _SampleTexture2D_EA4DD8F2_RGBA_0.r;
                float _SampleTexture2D_EA4DD8F2_G_5 = _SampleTexture2D_EA4DD8F2_RGBA_0.g;
                float _SampleTexture2D_EA4DD8F2_B_6 = _SampleTexture2D_EA4DD8F2_RGBA_0.b;
                float _SampleTexture2D_EA4DD8F2_A_7 = _SampleTexture2D_EA4DD8F2_RGBA_0.a;
                float _Multiply_5F6EB22E_Out_2;
                Unity_Multiply_float(_Time.y, -0.018, _Multiply_5F6EB22E_Out_2);

                float2 _Vector2_85C43C1B_Out_0 = float2(_Multiply_5F6EB22E_Out_2,0);
                float2 _TilingAndOffset_581491AA_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), _Vector2_85C43C1B_Out_0, _TilingAndOffset_581491AA_Out_3);
                float4 _SampleTexture2D_116C7E36_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_581491AA_Out_3);
                float _SampleTexture2D_116C7E36_R_4 = _SampleTexture2D_116C7E36_RGBA_0.r;
                float _SampleTexture2D_116C7E36_G_5 = _SampleTexture2D_116C7E36_RGBA_0.g;
                float _SampleTexture2D_116C7E36_B_6 = _SampleTexture2D_116C7E36_RGBA_0.b;
                float _SampleTexture2D_116C7E36_A_7 = _SampleTexture2D_116C7E36_RGBA_0.a;
                float4 _Blend_E96D7AE3_Out_2;
                Unity_Blend_Overlay_float4(_SampleTexture2D_EA4DD8F2_RGBA_0, _SampleTexture2D_116C7E36_RGBA_0, _Blend_E96D7AE3_Out_2, 0.7);
                float4 _Property_7B6FDA9E_Out_0 = _Tint;
                float4 _Blend_66D3BE22_Out_2;
                Unity_Blend_Overlay_float4(_Blend_E96D7AE3_Out_2, _Property_7B6FDA9E_Out_0, _Blend_66D3BE22_Out_2, 0.2);
                float _Property_87B89A7_Out_0 = Vector1_604D800B;
                float3 _Subtract_AF83BA8B_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _WorldSpaceCameraPos, _Subtract_AF83BA8B_Out_2);
                float _DotProduct_FA3CFD41_Out_2;
                Unity_DotProduct_float3(-1 * mul(UNITY_MATRIX_M, transpose(mul(UNITY_MATRIX_I_M, UNITY_MATRIX_I_V)) [2].xyz), _Subtract_AF83BA8B_Out_2, _DotProduct_FA3CFD41_Out_2);
                float2 _Vector2_D1443D94_Out_0 = float2(0,_ProjectionParams.z);
                float _Remap_54142FF7_Out_3;
                Unity_Remap_float(_DotProduct_FA3CFD41_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_54142FF7_Out_3);
                float _Property_34931150_Out_0 = _Offset;
                float _Add_E52C0E7D_Out_2;
                Unity_Add_float(_DotProduct_FA3CFD41_Out_2, _Property_34931150_Out_0, _Add_E52C0E7D_Out_2);
                float _Remap_9FC2BFD6_Out_3;
                Unity_Remap_float(_Add_E52C0E7D_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_9FC2BFD6_Out_3);
                float _SceneDepth_795A8AE8_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_795A8AE8_Out_1);
                float _Smoothstep_E6C5DA2F_Out_3;
                Unity_Smoothstep_float(_Remap_54142FF7_Out_3, _Remap_9FC2BFD6_Out_3, _SceneDepth_795A8AE8_Out_1, _Smoothstep_E6C5DA2F_Out_3);
                float _OneMinus_51E3FCAF_Out_1;
                Unity_OneMinus_float(_Smoothstep_E6C5DA2F_Out_3, _OneMinus_51E3FCAF_Out_1);
                float _Smoothstep_D148A55_Out_3;
                Unity_Smoothstep_float(0, 1, _OneMinus_51E3FCAF_Out_1, _Smoothstep_D148A55_Out_3);
                float _Multiply_147E627D_Out_2;
                Unity_Multiply_float(_Property_87B89A7_Out_0, _Smoothstep_D148A55_Out_3, _Multiply_147E627D_Out_2);

                float _Property_5673100C_Out_0 = _Opacity;
                float _Multiply_F2A88990_Out_2;
                Unity_Multiply_float(1, _Property_5673100C_Out_0, _Multiply_F2A88990_Out_2);

                surface.Albedo = (_Blend_66D3BE22_Out_2.xyz);
                surface.Emission = (_Multiply_147E627D_Out_2.xxx);
                surface.Alpha = _Multiply_F2A88990_Out_2;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv0 : TEXCOORD9;
                half4 uv1 : TEXCOORD10;

                UNITY_VERTEX_INPUT_INSTANCE_ID
        	};

            float3 _LightDirection;

            VertexOutput ShadowPassVertex(GraphVertexInput v)
        	{
        	    VertexOutput o;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);

                // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.uv0 = uv0;

        	    VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv0 = uv0;
                o.uv1 = uv1;

        	    
        	    float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
                float3 normalWS = TransformObjectToWorldNormal(v.normal);

                float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

        	#if UNITY_REVERSED_Z
        	    clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#else
        	    clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
        	#endif
                o.clipPos = clipPos;

        	    return o;
        	}

            half4 ShadowPassFragment(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;
                float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

                float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }

            ENDHLSL
        }

        Pass
        {
        	Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            ColorMask 0

            // Material options generated by graph
            Cull Back

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            //--------------------------------------
            // GPU Instancing
            #pragma multi_compile_instancing

            #pragma vertex vert
            #pragma fragment frag

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            CBUFFER_START(UnityPerMaterial)
            float _EmissionAmount;
            float _WaveHeight;
            float _Opacity;
            float4 _Tint;
            float _Offset;
            float Vector1_604D800B;
            CBUFFER_END

            TEXTURE2D(_BaseTex); SAMPLER(sampler_BaseTex); float4 _BaseTex_TexelSize;
            TEXTURE2D(_Emission); SAMPLER(sampler_Emission); float4 _Emission_TexelSize;
            TEXTURE2D(_SampleTexture2DLOD_C65E3FC4_Texture_1); SAMPLER(sampler_SampleTexture2DLOD_C65E3FC4_Texture_1); float4 _SampleTexture2DLOD_C65E3FC4_Texture_1_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 ObjectSpacePosition;
                half4 uv0;
            };

            struct SurfaceDescriptionInputs
            {
                float3 TangentSpaceNormal;
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                half4 uv0;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A + B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
            {
                float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
                float4 result2 = 2.0 * Base * Blend;
                float4 zeroOrOne = step(Base, 0.5);
                Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
            {
                Out = dot(A, B);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Split_E0F0B228_R_1 = IN.ObjectSpacePosition[0];
                float _Split_E0F0B228_G_2 = IN.ObjectSpacePosition[1];
                float _Split_E0F0B228_B_3 = IN.ObjectSpacePosition[2];
                float _Split_E0F0B228_A_4 = 0;
                float _Multiply_AB470896_Out_2;
                Unity_Multiply_float(0.5, _Time.y, _Multiply_AB470896_Out_2);

                float2 _TilingAndOffset_AB7F2ADF_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (10,10), (_Multiply_AB470896_Out_2.xx), _TilingAndOffset_AB7F2ADF_Out_3);
                float4 _SampleTexture2DLOD_C65E3FC4_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_SampleTexture2DLOD_C65E3FC4_Texture_1, sampler_SampleTexture2DLOD_C65E3FC4_Texture_1, _TilingAndOffset_AB7F2ADF_Out_3, 0);
                float _SampleTexture2DLOD_C65E3FC4_R_5 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.r;
                float _SampleTexture2DLOD_C65E3FC4_G_6 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.g;
                float _SampleTexture2DLOD_C65E3FC4_B_7 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.b;
                float _SampleTexture2DLOD_C65E3FC4_A_8 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.a;
                float _Property_9DDC2F17_Out_0 = _WaveHeight;
                float4 _Multiply_8CCE57AE_Out_2;
                Unity_Multiply_float(_SampleTexture2DLOD_C65E3FC4_RGBA_0, (_Property_9DDC2F17_Out_0.xxxx), _Multiply_8CCE57AE_Out_2);

                float4 _Add_517BED30_Out_2;
                Unity_Add_float4((_Split_E0F0B228_G_2.xxxx), _Multiply_8CCE57AE_Out_2, _Add_517BED30_Out_2);
                float4 _Combine_9FB3F0AE_RGBA_4;
                float3 _Combine_9FB3F0AE_RGB_5;
                float2 _Combine_9FB3F0AE_RG_6;
                Unity_Combine_float(_Split_E0F0B228_R_1, (_Add_517BED30_Out_2).x, _Split_E0F0B228_B_3, _Split_E0F0B228_A_4, _Combine_9FB3F0AE_RGBA_4, _Combine_9FB3F0AE_RGB_5, _Combine_9FB3F0AE_RG_6);
                description.Position = (_Combine_9FB3F0AE_RGBA_4.xyz);
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _Multiply_1F5F0C00_Out_2;
                Unity_Multiply_float(_Time.y, 0.02, _Multiply_1F5F0C00_Out_2);

                float2 _TilingAndOffset_541288F4_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), (_Multiply_1F5F0C00_Out_2.xx), _TilingAndOffset_541288F4_Out_3);
                float4 _SampleTexture2D_EA4DD8F2_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_541288F4_Out_3);
                float _SampleTexture2D_EA4DD8F2_R_4 = _SampleTexture2D_EA4DD8F2_RGBA_0.r;
                float _SampleTexture2D_EA4DD8F2_G_5 = _SampleTexture2D_EA4DD8F2_RGBA_0.g;
                float _SampleTexture2D_EA4DD8F2_B_6 = _SampleTexture2D_EA4DD8F2_RGBA_0.b;
                float _SampleTexture2D_EA4DD8F2_A_7 = _SampleTexture2D_EA4DD8F2_RGBA_0.a;
                float _Multiply_5F6EB22E_Out_2;
                Unity_Multiply_float(_Time.y, -0.018, _Multiply_5F6EB22E_Out_2);

                float2 _Vector2_85C43C1B_Out_0 = float2(_Multiply_5F6EB22E_Out_2,0);
                float2 _TilingAndOffset_581491AA_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), _Vector2_85C43C1B_Out_0, _TilingAndOffset_581491AA_Out_3);
                float4 _SampleTexture2D_116C7E36_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_581491AA_Out_3);
                float _SampleTexture2D_116C7E36_R_4 = _SampleTexture2D_116C7E36_RGBA_0.r;
                float _SampleTexture2D_116C7E36_G_5 = _SampleTexture2D_116C7E36_RGBA_0.g;
                float _SampleTexture2D_116C7E36_B_6 = _SampleTexture2D_116C7E36_RGBA_0.b;
                float _SampleTexture2D_116C7E36_A_7 = _SampleTexture2D_116C7E36_RGBA_0.a;
                float4 _Blend_E96D7AE3_Out_2;
                Unity_Blend_Overlay_float4(_SampleTexture2D_EA4DD8F2_RGBA_0, _SampleTexture2D_116C7E36_RGBA_0, _Blend_E96D7AE3_Out_2, 0.7);
                float4 _Property_7B6FDA9E_Out_0 = _Tint;
                float4 _Blend_66D3BE22_Out_2;
                Unity_Blend_Overlay_float4(_Blend_E96D7AE3_Out_2, _Property_7B6FDA9E_Out_0, _Blend_66D3BE22_Out_2, 0.2);
                float _Property_87B89A7_Out_0 = Vector1_604D800B;
                float3 _Subtract_AF83BA8B_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _WorldSpaceCameraPos, _Subtract_AF83BA8B_Out_2);
                float _DotProduct_FA3CFD41_Out_2;
                Unity_DotProduct_float3(-1 * mul(UNITY_MATRIX_M, transpose(mul(UNITY_MATRIX_I_M, UNITY_MATRIX_I_V)) [2].xyz), _Subtract_AF83BA8B_Out_2, _DotProduct_FA3CFD41_Out_2);
                float2 _Vector2_D1443D94_Out_0 = float2(0,_ProjectionParams.z);
                float _Remap_54142FF7_Out_3;
                Unity_Remap_float(_DotProduct_FA3CFD41_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_54142FF7_Out_3);
                float _Property_34931150_Out_0 = _Offset;
                float _Add_E52C0E7D_Out_2;
                Unity_Add_float(_DotProduct_FA3CFD41_Out_2, _Property_34931150_Out_0, _Add_E52C0E7D_Out_2);
                float _Remap_9FC2BFD6_Out_3;
                Unity_Remap_float(_Add_E52C0E7D_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_9FC2BFD6_Out_3);
                float _SceneDepth_795A8AE8_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_795A8AE8_Out_1);
                float _Smoothstep_E6C5DA2F_Out_3;
                Unity_Smoothstep_float(_Remap_54142FF7_Out_3, _Remap_9FC2BFD6_Out_3, _SceneDepth_795A8AE8_Out_1, _Smoothstep_E6C5DA2F_Out_3);
                float _OneMinus_51E3FCAF_Out_1;
                Unity_OneMinus_float(_Smoothstep_E6C5DA2F_Out_3, _OneMinus_51E3FCAF_Out_1);
                float _Smoothstep_D148A55_Out_3;
                Unity_Smoothstep_float(0, 1, _OneMinus_51E3FCAF_Out_1, _Smoothstep_D148A55_Out_3);
                float _Multiply_147E627D_Out_2;
                Unity_Multiply_float(_Property_87B89A7_Out_0, _Smoothstep_D148A55_Out_3, _Multiply_147E627D_Out_2);

                float _Property_5673100C_Out_0 = _Opacity;
                float _Multiply_F2A88990_Out_2;
                Unity_Multiply_float(1, _Property_5673100C_Out_0, _Multiply_F2A88990_Out_2);

                surface.Albedo = (_Blend_66D3BE22_Out_2.xyz);
                surface.Emission = (_Multiply_147E627D_Out_2.xxx);
                surface.Alpha = _Multiply_F2A88990_Out_2;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv0 : TEXCOORD9;
                half4 uv1 : TEXCOORD10;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        	    // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

        		VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

                // Vertex description inputs defined by graph
                vdi.ObjectSpacePosition = ObjectSpacePosition;
                vdi.uv0 = uv0;

        	    VertexDescription vd = PopulateVertexData(vdi);
                v.vertex.xyz = vd.Position;

        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv0 = uv0;
                o.uv1 = uv1;

        	    o.clipPos = TransformObjectToHClip(v.vertex.xyz);
        	    return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;
                float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

                float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif
                return 0;
            }
            ENDHLSL
        }

        // This pass it not used during regular rendering, only for lightmap baking.
        Pass
        {
        	Name "Meta"
            Tags{"LightMode" = "Meta"}

            Cull Off

            HLSLPROGRAM
            // Required to compile gles 2.0 with standard srp library
            #pragma prefer_hlslcc gles
            #pragma exclude_renderers d3d11_9x
            #pragma target 2.0

            #pragma vertex vert
            #pragma fragment frag

            float4 _MainTex_ST;

            // Defines generated by graph
            #define REQUIRE_DEPTH_TEXTURE

            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
            #include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

            #pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

                CBUFFER_START(UnityPerMaterial)
            float _EmissionAmount;
            float _WaveHeight;
            float _Opacity;
            float4 _Tint;
            float _Offset;
            float Vector1_604D800B;
            CBUFFER_END

            TEXTURE2D(_BaseTex); SAMPLER(sampler_BaseTex); float4 _BaseTex_TexelSize;
            TEXTURE2D(_Emission); SAMPLER(sampler_Emission); float4 _Emission_TexelSize;
            TEXTURE2D(_SampleTexture2DLOD_C65E3FC4_Texture_1); SAMPLER(sampler_SampleTexture2DLOD_C65E3FC4_Texture_1); float4 _SampleTexture2DLOD_C65E3FC4_Texture_1_TexelSize;

            struct VertexDescriptionInputs
            {
                float3 ObjectSpacePosition;
                half4 uv0;
            };

            struct SurfaceDescriptionInputs
            {
                float3 TangentSpaceNormal;
                float3 WorldSpacePosition;
                float4 ScreenPosition;
                half4 uv0;
            };


            void Unity_Multiply_float (float A, float B, out float Out)
            {
                Out = A * B;
            }

            void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
            {
                Out = UV * Tiling + Offset;
            }

            void Unity_Multiply_float (float4 A, float4 B, out float4 Out)
            {
                Out = A * B;
            }

            void Unity_Add_float4(float4 A, float4 B, out float4 Out)
            {
                Out = A + B;
            }

            void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
            {
                RGBA = float4(R, G, B, A);
                RGB = float3(R, G, B);
                RG = float2(R, G);
            }

            void Unity_Blend_Overlay_float4(float4 Base, float4 Blend, out float4 Out, float Opacity)
            {
                float4 result1 = 1.0 - 2.0 * (1.0 - Base) * (1.0 - Blend);
                float4 result2 = 2.0 * Base * Blend;
                float4 zeroOrOne = step(Base, 0.5);
                Out = result2 * zeroOrOne + (1 - zeroOrOne) * result1;
                Out = lerp(Base, Out, Opacity);
            }

            void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
            {
                Out = A - B;
            }

            void Unity_DotProduct_float3(float3 A, float3 B, out float Out)
            {
                Out = dot(A, B);
            }

            void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
            {
                Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
            }

            void Unity_Add_float(float A, float B, out float Out)
            {
                Out = A + B;
            }

            void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
            {
                Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
            }

            void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
            {
                Out = smoothstep(Edge1, Edge2, In);
            }

            void Unity_OneMinus_float(float In, out float Out)
            {
                Out = 1 - In;
            }

            struct VertexDescription
            {
                float3 Position;
            };

            VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
            {
                VertexDescription description = (VertexDescription)0;
                float _Split_E0F0B228_R_1 = IN.ObjectSpacePosition[0];
                float _Split_E0F0B228_G_2 = IN.ObjectSpacePosition[1];
                float _Split_E0F0B228_B_3 = IN.ObjectSpacePosition[2];
                float _Split_E0F0B228_A_4 = 0;
                float _Multiply_AB470896_Out_2;
                Unity_Multiply_float(0.5, _Time.y, _Multiply_AB470896_Out_2);

                float2 _TilingAndOffset_AB7F2ADF_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (10,10), (_Multiply_AB470896_Out_2.xx), _TilingAndOffset_AB7F2ADF_Out_3);
                float4 _SampleTexture2DLOD_C65E3FC4_RGBA_0 = SAMPLE_TEXTURE2D_LOD(_SampleTexture2DLOD_C65E3FC4_Texture_1, sampler_SampleTexture2DLOD_C65E3FC4_Texture_1, _TilingAndOffset_AB7F2ADF_Out_3, 0);
                float _SampleTexture2DLOD_C65E3FC4_R_5 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.r;
                float _SampleTexture2DLOD_C65E3FC4_G_6 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.g;
                float _SampleTexture2DLOD_C65E3FC4_B_7 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.b;
                float _SampleTexture2DLOD_C65E3FC4_A_8 = _SampleTexture2DLOD_C65E3FC4_RGBA_0.a;
                float _Property_9DDC2F17_Out_0 = _WaveHeight;
                float4 _Multiply_8CCE57AE_Out_2;
                Unity_Multiply_float(_SampleTexture2DLOD_C65E3FC4_RGBA_0, (_Property_9DDC2F17_Out_0.xxxx), _Multiply_8CCE57AE_Out_2);

                float4 _Add_517BED30_Out_2;
                Unity_Add_float4((_Split_E0F0B228_G_2.xxxx), _Multiply_8CCE57AE_Out_2, _Add_517BED30_Out_2);
                float4 _Combine_9FB3F0AE_RGBA_4;
                float3 _Combine_9FB3F0AE_RGB_5;
                float2 _Combine_9FB3F0AE_RG_6;
                Unity_Combine_float(_Split_E0F0B228_R_1, (_Add_517BED30_Out_2).x, _Split_E0F0B228_B_3, _Split_E0F0B228_A_4, _Combine_9FB3F0AE_RGBA_4, _Combine_9FB3F0AE_RGB_5, _Combine_9FB3F0AE_RG_6);
                description.Position = (_Combine_9FB3F0AE_RGBA_4.xyz);
                return description;
            }

            struct SurfaceDescription
            {
                float3 Albedo;
                float3 Emission;
                float Alpha;
                float AlphaClipThreshold;
            };

            SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
            {
                SurfaceDescription surface = (SurfaceDescription)0;
                float _Multiply_1F5F0C00_Out_2;
                Unity_Multiply_float(_Time.y, 0.02, _Multiply_1F5F0C00_Out_2);

                float2 _TilingAndOffset_541288F4_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), (_Multiply_1F5F0C00_Out_2.xx), _TilingAndOffset_541288F4_Out_3);
                float4 _SampleTexture2D_EA4DD8F2_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_541288F4_Out_3);
                float _SampleTexture2D_EA4DD8F2_R_4 = _SampleTexture2D_EA4DD8F2_RGBA_0.r;
                float _SampleTexture2D_EA4DD8F2_G_5 = _SampleTexture2D_EA4DD8F2_RGBA_0.g;
                float _SampleTexture2D_EA4DD8F2_B_6 = _SampleTexture2D_EA4DD8F2_RGBA_0.b;
                float _SampleTexture2D_EA4DD8F2_A_7 = _SampleTexture2D_EA4DD8F2_RGBA_0.a;
                float _Multiply_5F6EB22E_Out_2;
                Unity_Multiply_float(_Time.y, -0.018, _Multiply_5F6EB22E_Out_2);

                float2 _Vector2_85C43C1B_Out_0 = float2(_Multiply_5F6EB22E_Out_2,0);
                float2 _TilingAndOffset_581491AA_Out_3;
                Unity_TilingAndOffset_float(IN.uv0.xy, float2 (500,500), _Vector2_85C43C1B_Out_0, _TilingAndOffset_581491AA_Out_3);
                float4 _SampleTexture2D_116C7E36_RGBA_0 = SAMPLE_TEXTURE2D(_BaseTex, sampler_BaseTex, _TilingAndOffset_581491AA_Out_3);
                float _SampleTexture2D_116C7E36_R_4 = _SampleTexture2D_116C7E36_RGBA_0.r;
                float _SampleTexture2D_116C7E36_G_5 = _SampleTexture2D_116C7E36_RGBA_0.g;
                float _SampleTexture2D_116C7E36_B_6 = _SampleTexture2D_116C7E36_RGBA_0.b;
                float _SampleTexture2D_116C7E36_A_7 = _SampleTexture2D_116C7E36_RGBA_0.a;
                float4 _Blend_E96D7AE3_Out_2;
                Unity_Blend_Overlay_float4(_SampleTexture2D_EA4DD8F2_RGBA_0, _SampleTexture2D_116C7E36_RGBA_0, _Blend_E96D7AE3_Out_2, 0.7);
                float4 _Property_7B6FDA9E_Out_0 = _Tint;
                float4 _Blend_66D3BE22_Out_2;
                Unity_Blend_Overlay_float4(_Blend_E96D7AE3_Out_2, _Property_7B6FDA9E_Out_0, _Blend_66D3BE22_Out_2, 0.2);
                float _Property_87B89A7_Out_0 = Vector1_604D800B;
                float3 _Subtract_AF83BA8B_Out_2;
                Unity_Subtract_float3(IN.WorldSpacePosition, _WorldSpaceCameraPos, _Subtract_AF83BA8B_Out_2);
                float _DotProduct_FA3CFD41_Out_2;
                Unity_DotProduct_float3(-1 * mul(UNITY_MATRIX_M, transpose(mul(UNITY_MATRIX_I_M, UNITY_MATRIX_I_V)) [2].xyz), _Subtract_AF83BA8B_Out_2, _DotProduct_FA3CFD41_Out_2);
                float2 _Vector2_D1443D94_Out_0 = float2(0,_ProjectionParams.z);
                float _Remap_54142FF7_Out_3;
                Unity_Remap_float(_DotProduct_FA3CFD41_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_54142FF7_Out_3);
                float _Property_34931150_Out_0 = _Offset;
                float _Add_E52C0E7D_Out_2;
                Unity_Add_float(_DotProduct_FA3CFD41_Out_2, _Property_34931150_Out_0, _Add_E52C0E7D_Out_2);
                float _Remap_9FC2BFD6_Out_3;
                Unity_Remap_float(_Add_E52C0E7D_Out_2, _Vector2_D1443D94_Out_0, float2 (0,1), _Remap_9FC2BFD6_Out_3);
                float _SceneDepth_795A8AE8_Out_1;
                Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_795A8AE8_Out_1);
                float _Smoothstep_E6C5DA2F_Out_3;
                Unity_Smoothstep_float(_Remap_54142FF7_Out_3, _Remap_9FC2BFD6_Out_3, _SceneDepth_795A8AE8_Out_1, _Smoothstep_E6C5DA2F_Out_3);
                float _OneMinus_51E3FCAF_Out_1;
                Unity_OneMinus_float(_Smoothstep_E6C5DA2F_Out_3, _OneMinus_51E3FCAF_Out_1);
                float _Smoothstep_D148A55_Out_3;
                Unity_Smoothstep_float(0, 1, _OneMinus_51E3FCAF_Out_1, _Smoothstep_D148A55_Out_3);
                float _Multiply_147E627D_Out_2;
                Unity_Multiply_float(_Property_87B89A7_Out_0, _Smoothstep_D148A55_Out_3, _Multiply_147E627D_Out_2);

                float _Property_5673100C_Out_0 = _Opacity;
                float _Multiply_F2A88990_Out_2;
                Unity_Multiply_float(1, _Property_5673100C_Out_0, _Multiply_F2A88990_Out_2);

                surface.Albedo = (_Blend_66D3BE22_Out_2.xyz);
                surface.Emission = (_Multiply_147E627D_Out_2.xxx);
                surface.Alpha = _Multiply_F2A88990_Out_2;
                surface.AlphaClipThreshold = 0.5;
                return surface;
            }

            struct GraphVertexInput
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float4 tangent : TANGENT;
                float4 texcoord0 : TEXCOORD0;
                float4 texcoord1 : TEXCOORD1;
                UNITY_VERTEX_INPUT_INSTANCE_ID
            };


        	struct VertexOutput
        	{
        	    float2 uv           : TEXCOORD0;
        	    float4 clipPos      : SV_POSITION;
                // Interpolators defined by graph
                float3 WorldSpacePosition : TEXCOORD3;
                float3 WorldSpaceNormal : TEXCOORD4;
                float3 WorldSpaceTangent : TEXCOORD5;
                float3 WorldSpaceBiTangent : TEXCOORD6;
                float3 WorldSpaceViewDirection : TEXCOORD7;
                float4 ScreenPosition : TEXCOORD8;
                half4 uv0 : TEXCOORD9;
                half4 uv1 : TEXCOORD10;

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
        	};

            VertexOutput vert(GraphVertexInput v)
            {
                VertexOutput o = (VertexOutput)0;
        	    UNITY_SETUP_INSTANCE_ID(v);
                UNITY_TRANSFER_INSTANCE_ID(v, o);
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

        	    // Vertex transformations performed by graph
                float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
                float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
                float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
                float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
                float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
                float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
                float4 uv0 = v.texcoord0;
                float4 uv1 = v.texcoord1;
                float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


        	    // Vertex shader outputs defined by graph
                o.WorldSpacePosition = WorldSpacePosition;
                o.WorldSpaceNormal = WorldSpaceNormal;
                o.WorldSpaceTangent = WorldSpaceTangent;
                o.WorldSpaceBiTangent = WorldSpaceBiTangent;
                o.WorldSpaceViewDirection = WorldSpaceViewDirection;
                o.ScreenPosition = ScreenPosition;
                o.uv0 = uv0;
                o.uv1 = uv1;

                o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
        	    return o;
            }

            half4 frag(VertexOutput IN ) : SV_TARGET
            {
                UNITY_SETUP_INSTANCE_ID(IN);
        		UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

                // Pixel transformations performed by graph
                float3 WorldSpacePosition = IN.WorldSpacePosition;
                float3 WorldSpaceNormal = IN.WorldSpaceNormal;
                float3 WorldSpaceTangent = IN.WorldSpaceTangent;
                float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
                float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
                float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
                float4 ScreenPosition = IN.ScreenPosition;
                float4 uv0 = IN.uv0;
                float4 uv1 = IN.uv1;
                float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

                SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

        		// Surface description inputs defined by graph
                surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
                surfaceInput.WorldSpacePosition = WorldSpacePosition;
                surfaceInput.ScreenPosition = ScreenPosition;
                surfaceInput.uv0 = uv0;

                SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

        		float3 Albedo = float3(0.5, 0.5, 0.5);
        		float3 Emission = 0;
        		float Alpha = 1;
        		float AlphaClipThreshold = 0;

        		// Surface description remap performed by graph
                Albedo = surf.Albedo;
                Emission = surf.Emission;
                Alpha = surf.Alpha;
                AlphaClipThreshold = surf.AlphaClipThreshold;

         #if _AlphaClip
        		clip(Alpha - AlphaClipThreshold);
        #endif

                MetaInput metaInput = (MetaInput)0;
                metaInput.Albedo = Albedo;
                metaInput.Emission = Emission;
                
                return MetaFragment(metaInput);
            }
            ENDHLSL
        }
    }
    CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
    FallBack "Hidden/InternalErrorShader"
}
